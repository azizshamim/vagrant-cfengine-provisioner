# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'cfengine_provisioner.rb'

Vagrant::Config.run do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  config.vm.define :cfhub do |hub_config|
    # Every Vagrant virtual environment requires a box to build off of.
    hub_config.vm.box = "lucid32"

    # Use the CFEngine provisioner
    hub_config.vm.provision CFEngineProvisioner do |cf3|
      # Commented-out configuration values indicate the defaults.

      # Attempt to install CFEngine if not installed yet. Depends on the
      # binary package repositories from http://cfengine.com/pub/
      # Any "true" value will cause CFEngine to be installed if it's not
      # present already. If this parameter is set to :force,
      # then CFEngine will be reinstalled even if it's already there.
      # cf3.install_cfengine = true

      # Should this machine be configured as a policy hub?
      # cf3.am_policy_hub = true

      # Address of the policy server to use for bootstrapping. Should
      # be the local IP address for policy servers.
      # If not specified, the provisioner will automatically use the
      # IP address of the first non-localhost network interface.
      # Unfortunately in Vagrant VMs this is normally a NAT interface
      # that has no communication to the outside world, so we need
      # to set it manually to the address in a host-only network
      # which needs to be configured using the config.vm.network
      # parameter, as shown below.
      cf3.policy_server = "10.1.1.10"
      
      # Should CFEngine be bootstrapped in this machine if it's not
      # bootstrapped already?
      # Any "true" value will be interpreted as "yes".
      # If this parameter is set to :force, CFEngine
      # will be re-bootstrapped even if it's already been done
      # before.
      # cf3.bootstrap = true

      # URL of a .tar.gz file that gets unpacked under /var/cfengine/
      # after installation but before bootstrap. This file should
      # contain the contents of /var/cfengine exactly as desired,
      # so it should contain the appropriate directories, for example
      # masterfiles/foo.cf, inputs/bar.cf, ppkeys/, etc.
      #cf3.cfengine_tarfile_url = 'http://localhost/cfengine_files.tar.gz'

      # Path of a local directory to copy over to /var/cfengine/
      # on the VM. Same effect as cfengine_tarfile_url. Only one
      # of cfengine_tarfile_url or cfengine_files can be specified
      # This is not implemented yet.
      #cf3.cfengine_files_path = './cfengine_files'

      # Normally this shouldn't be modified, except for testing or
      # for internal repositories
      # cf3.cfengine_debian_repo_line = 'deb http://cfengine.com/pub/apt $(lsb_release -cs) main'

      # Normally this shouldn't be modified, except for testing or
      # for internal repositories
      #cf3.cfengine_yum_repo_url = 'http://cfengine.com/pub/yum/'
    end

    # For debugging
    # hub_config.vm.boot_mode = :gui

    # Assign different IP addresses depending on the box, to avoid
    # ssh warnings.
    hub_config.vm.network :hostonly, "10.1.1.10"
  end

  # Enable and configure the chef solo provisioner
  # config.vm.provision :chef_solo do |chef|
  #   # We're going to download our cookbooks from the web
  #   chef.recipe_url = "http://files.vagrantup.com/getting_started/cookbooks.tar.gz"

  #   # Tell chef what recipe to run. In this case, the `vagrant_main` recipe
  #   # does all the magic.
  #   chef.add_recipe("vagrant_main")
  # end

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "192.168.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  # config.vm.forward_port 80, 4567

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "base.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding 
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # IF you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
